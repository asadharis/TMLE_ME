out2 <- fourier_out(zt, lim_val = 100, res = 2^8)
plot(out2, type = "l")
plot(zt, Re(out2), type = "l")
plot(zt, Im(out2), type = "l")
plot(zt,Mod(out2))
# Our resulting function which will take a vector zt as input.
fourier_out <- function(zt, lim_val = 1, res = 2^10, e_sd = 1) {
myf_re <- function(t){
Re(fourier_inner(t, lim_val = 1,res = res)) * exp(t * e_sd^2/2)
}
fourierin_1d(myf_re, lower_int = -lim_val, upper_int = lim_val,
const_adj = 0, freq_adj = 1, resolution = res,
eval_grid = zt)
}
ansf <- function(w, alpha = 1, e_sd = 1) {
1 + exp(-w*alpha)*exp(-(alpha*e_sd)^2/2)
}
ws <- seq(-4,4,length = 1e+3)
plot(ws, ansf(ws))
zt <- seq(-4,4,length = 1e+3)
out2 <- fourier_out(zt, lim_val = 1, res = 2^8)
plot(out2, type = "l")
out2 <- fourier_out(zt, lim_val = 10, res = 2^8)
plot(out2, type = "l")
plot(zt, Re(out2), type = "l")
plot(zt, Im(out2), type = "l")
# Our resulting function which will take a vector zt as input.
fourier_out <- function(zt, lim_val = 1, res = 2^10, e_sd = 1) {
myf_re <- function(t){
Re(fourier_inner(t, lim_val = lim_val,res = res)) * exp(t * e_sd^2/2)
}
fourierin_1d(myf_re, lower_int = -lim_val, upper_int = lim_val,
const_adj = 0, freq_adj = 1, resolution = res,
eval_grid = zt)
}
ansf <- function(w, alpha = 1, e_sd = 1) {
1 + exp(-w*alpha)*exp(-(alpha*e_sd)^2/2)
}
ws <- seq(-4,4,length = 1e+3)
plot(ws, ansf(ws))
zt <- seq(-4,4,length = 1e+3)
out2 <- fourier_out(zt, lim_val = 1, res = 2^8)
plot(out2, type = "l")
plot(zt, Re(out2), type = "l")
plot(zt, Im(out2), type = "l")
out2 <- fourier_out(zt, lim_val = 2, res = 2^8)
plot(out2, type = "l")
plot(zt, Re(out2), type = "l")
plot(zt, Im(out2), type = "l")
out2 <- fourier_out(zt, lim_val = 3, res = 2^8)
plot(out2, type = "l")
plot(zt, Re(out2), type = "l")
plot(zt, Im(out2), type = "l")
out2 <- fourier_out(zt, lim_val = 7, res = 2^8)
plot(out2, type = "l")
plot(zt, Re(out2), type = "l")
plot(zt, Im(out2), type = "l")
out2 <- fourier_out(zt, lim_val = 10, res = 2^8)
plot(out2, type = "l")
plot(zt, Re(out2), type = "l")
plot(zt, Im(out2), type = "l")
out2 <- fourier_out(zt, lim_val = 100, res = 2^8)
plot(out2, type = "l")
plot(zt, Re(out2), type = "l")
plot(zt, Im(out2), type = "l")
out2 <- fourier_out(zt, lim_val = 1000, res = 2^8)
plot(out2, type = "l")
out2 <- fourier_out(zt, lim_val = 500, res = 2^8)
plot(out2, type = "l")
# Our resulting function which will take a vector zt as input.
fourier_out <- function(zt, lim_in = 1, lim_out=1, res = 2^10, e_sd = 1) {
myf_re <- function(t){
Re(fourier_inner(t, lim_val = lim_in,res = res)) * exp(t * e_sd^2/2)
}
fourierin_1d(myf_re, lower_int = -lim_out, upper_int = lim_out,
const_adj = 0, freq_adj = 1, resolution = res,
eval_grid = zt)
}
ansf <- function(w, alpha = 1, e_sd = 1) {
1 + exp(-w*alpha)*exp(-(alpha*e_sd)^2/2)
}
ws <- seq(-4,4,length = 1e+3)
plot(ws, ansf(ws))
zt <- seq(-4,4,length = 1e+3)
out2 <- fourier_out(zt, lim_in = 50, lim_out = 20, res = 2^8)
plot(out2, type = "l")
plot(zt, Re(out2), type = "l")
plot(zt, Im(out2), type = "l")
out2 <- fourier_out(zt, lim_in = 5, lim_out = 20, res = 2^8)
plot(out2, type = "l")
plot(zt, Re(out2), type = "l")
plot(zt, Im(out2), type = "l")
out2 <- fourier_out(zt, lim_in = 5, lim_out = 50, res = 2^8)
plot(out2, type = "l")
plot(zt, Re(out2), type = "l")
plot(zt, Im(out2), type = "l")
out2 <- fourier_out(zt, lim_in = 4, lim_out = 50, res = 2^8)
plot(out2, type = "l")
plot(zt, Re(out2), type = "l")
out2 <- fourier_out(zt, lim_in = 1, lim_out = 50, res = 2^8)
plot(out2, type = "l")
plot(zt, Re(out2), type = "l")
plot(zt, Im(out2), type = "l")
out2 <- fourier_out(zt, lim_in = 5, lim_out = 50, res = 2^8)
plot(out2, type = "l")
plot(zt, Re(out2), type = "l")
plot(zt, Im(out2), type = "l")
plot(zt,Mod(out2))
out2 <- fourier_out(zt, lim_in = 5, lim_out = 60, res = 2^8)
plot(out2, type = "l")
plot(zt, Re(out2), type = "l")
plot(zt, Im(out2), type = "l")
out2 <- fourier_out(zt, lim_in = 5, lim_out = 100, res = 2^8)
plot(out2, type = "l")
plot(zt, Re(out2), type = "l")
plot(zt, Im(out2), type = "l")
plot(zt,Mod(out2))
out2 <- fourier_out(zt, lim_in = 5, lim_out = 400, res = 2^8)
plot(out2, type = "l")
plot(zt, Re(out2), type = "l")
plot(zt, Im(out2), type = "l")
plot(zt,Mod(out2))
# Our resulting function which will take a vector zt as input.
fourier_out <- function(zt, lim_in = 1, lim_out=1, res = 2^10, e_sd = 1) {
myf_re <- function(t){
Re(fourier_inner(t, lim_val = lim_in,res = res)) * exp(t^2 * e_sd^2/2)
}
fourierin_1d(myf_re, lower_int = -lim_out, upper_int = lim_out,
const_adj = 0, freq_adj = 1, resolution = res,
eval_grid = zt)
}
ansf <- function(w, alpha = 1, e_sd = 1) {
1 + exp(-w*alpha)*exp(-(alpha*e_sd)^2/2)
}
ws <- seq(-4,4,length = 1e+3)
plot(ws, ansf(ws))
zt <- seq(-4,4,length = 1e+3)
out2 <- fourier_out(zt, lim_in = 5, lim_out = 400, res = 2^8)
out2 <- fourier_out(zt, lim_in = 5, lim_out = 10, res = 2^8)
plot(out2, type = "l")
plot(zt, Re(out2), type = "l")
plot(zt, Im(out2), type = "l")
plot(zt,Mod(out2))
# Our resulting function which will take a vector zt as input.
fourier_out <- function(zt, lim_in = 1, lim_out=1, res = 2^10, e_sd = 1) {
myf_re <- function(t){
Re(fourier_inner(t, lim_val = lim_in,res = res)) * exp(t^2 * e_sd^2/2)
}
fourierin_1d(myf_re, lower_int = -lim_out, upper_int = lim_out,
const_adj = 0, freq_adj = 1, resolution = res,
eval_grid = zt)
}
ansf <- function(w, alpha = 1, e_sd = 1) {
1 + exp(-w*alpha)*exp(-(alpha*e_sd)^2/2)
}
ws <- seq(-4,4,length = 1e+3)
plot(ws, ansf(ws))
zt <- seq(-4,4,length = 1e+3)
out2 <- fourier_out(zt, lim_in = 5, lim_out = 10, res = 2^8)
out2 <- fourier_out(zt, lim_in = 5, lim_out = 5, res = 2^8)
plot(out2, type = "l")
plot(zt, Re(out2), type = "l")
plot(zt, Im(out2), type = "l")
out2 <- fourier_out(zt, lim_in = 5, lim_out = 50, res = 2^8)
plot(out2, type = "l")
out2 <- fourier_out(zt, lim_in = 5, lim_out = 10, res = 2^8)
out2 <- fourier_out(zt, lim_in = 10, lim_out = 10, res = 2^8)
plot(out2, type = "l")
plot(zt, Re(out2), type = "l")
plot(zt, Im(out2), type = "l")
out2 <- fourier_out(zt, lim_in = 20, lim_out = 20, res = 2^8)
plot(out2, type = "l")
plot(zt, Re(out2), type = "l")
plot(zt, Im(out2), type = "l")
?fourierin_1d
fourierin_1d(function(x){rep(1, length(x))}, lower_int = -5, upper_int = 5,
const_adj = -1, freq_adj = -1, resolution = 2^6)
fourierin_1d(function(x){rep(1, length(x))}, lower_int = -5, upper_int = 5,
const_adj = -1, freq_adj = -1, resolution = 2^6, lower_eval = -10,
upper_eval = 10)
out <- fourierin_1d(function(x){rep(1, length(x))}, lower_int = -5, upper_int = 5,
const_adj = -1, freq_adj = -1, resolution = 2^6, lower_eval = -10,
upper_eval = 10)
plot(out)
plot(out$values)
plot(out$w)
plot(out$w, out$values)
plot(out$w, Re(out$values))
plot(out$w, Re(out$values), type = "l")
xt <- seq(-10,10, length = 1e+3)
out <- fourierin_1d(function(x){rep(1, length(x))}, lower_int = -5, upper_int = 5,
const_adj = -1, freq_adj = -1, resolution = 2^6, eval_grid = xt)
out <- fourierin_1d(function(x){rep(1, length(x))}, lower_int = -5, upper_int = 5,
const_adj = -1, freq_adj = -1, resolution = 2^6, eval_grid = xt)
plot(xt, Re(out))
plot(xt, Re(out), type = "l")
xt <- seq(-10,10, length = 1e+3)
li <- 1
out <- fourierin_1d(function(x){rep(1, length(x))}, lower_int = -li, upper_int = li,
const_adj = -1, freq_adj = -1, resolution = 2^6, eval_grid = xt)
plot(xt, Re(out), type = "l")
li <- 5
out <- fourierin_1d(function(x){rep(1, length(x))}, lower_int = -li, upper_int = li,
const_adj = -1, freq_adj = -1, resolution = 2^6, eval_grid = xt)
plot(xt, Re(out), type = "l")
plot(xt, Im(out), type = "l")
xt <- seq(-10,10, length = 1e+3)
li <- 10
out <- fourierin_1d(function(x){rep(1, length(x))}, lower_int = -li, upper_int = li,
const_adj = -1, freq_adj = -1, resolution = 2^6, eval_grid = xt)
plot(xt, Re(out), type = "l")
li <- 20
out <- fourierin_1d(function(x){rep(1, length(x))}, lower_int = -li, upper_int = li,
const_adj = -1, freq_adj = -1, resolution = 2^6, eval_grid = xt)
plot(xt, Re(out), type = "l")
li <- 50
out <- fourierin_1d(function(x){rep(1, length(x))}, lower_int = -li, upper_int = li,
const_adj = -1, freq_adj = -1, resolution = 2^6, eval_grid = xt)
plot(xt, Re(out), type = "l")
reci_gaus <- function(t, sd = 1) {
exp((sd)^2*t^2/2)
}
foureir_inner2 <- function(z, li = 1, res = 2^10) {
fourierin_1d(reci_gaus, lower_int = -li,
upper_int = li, const_adj = 0,
freq_adj = -1, resolution = res,
eval_grid = z)
}
zs <- seq(-10,10,length = 1e+3)
foureir_inner2(zs, li=1,res = 2^8)
out <- foureir_inner2(zs, li=1,res = 2^8)
plot(zs, Re(out))
plot(zs, Im(out))
plot(zs, Im(out), type = "l")
plot(zs, Re(out), type = "l")
out <- foureir_inner2(zs, li=2,res = 2^8)
plot(zs, Re(out), type = "l")
out <- foureir_inner2(zs, li=5,res = 2^8)
plot(zs, Re(out), type = "l")
out <- foureir_inner2(zs, li=10,res = 2^8)
plot(zs, Re(out), type = "l")
out <- foureir_inner2(zs, li=100,res = 2^8)
plot(zs, Re(out), type = "l")
out <- foureir_inner2(zs, li=50,res = 2^8)
plot(zs, Re(out), type = "l")
out <- foureir_inner2(zs, li=10,res = 2^8)
plot(zs, Re(out), type = "l")
out <- foureir_inner2(zs, li=10,res = 2^10)
plot(zs, Re(out), type = "l")
out <- foureir_inner2(zs, li=10,res = 2^20)
plot(zs, Re(out), type = "l")
out <- foureir_inner2(zs, li=10,res = 2^10)
plot(zs, Re(out), type = "l")
plot(zs, Im(out), type = "l")
out <- foureir_inner2(zs, li=12,res = 2^10)
plot(zs, Re(out), type = "l")
out <- foureir_inner2(zs, li=15,res = 2^10)
plot(zs, Re(out), type = "l")
out <- foureir_inner2(zs, li=5,res = 2^10)
plot(zs, Re(out), type = "l")
zs <- seq(-100,100,length = 1e+3)
out <- foureir_inner2(zs, li=5,res = 2^10)
plot(zs, Re(out), type = "l")
out <- foureir_inner2(zs, li=14,res = 2^10)
plot(zs, Re(out), type = "l")
out <- foureir_inner2(zs, li=18,res = 2^10)
plot(zs, Re(out), type = "l")
plot(zs, Im(out), type = "l")
plot(zs, Re(out), type = "l")
plot(es, (1-5*es)/(1-es))
es <- seq(-1,1,length = 100)
plot(es, (1-5*es)/(1-es))
es <- seq(0,0.3,length = 100)
plot(es, (1-5*es)/(1-es))
plot(es, (4*es)/(1-es))
es <- seq(0,0.25,length = 100)
plot(es, (4*es)/(1-es))
(4*es)/(1-es)
es <- seq(0,1/5,length = 100)
plot(es, (4*es)/(1-es))
setwd("C:/Users/asadh/Dropbox/00A POSTDOC Other Projects/Grace Yi/Measurement Error TMLE/Rfiles")
# The main functions for calculating the
# Average Treatment effect and related quantities.
#
##### LOAD LIBRARIES #######
#
source("helper_functions.R")
source("integral_functions.R")
View(calE_transform)
source("datagen_functions.R")
# The main functions for calculating the
# Average Treatment effect and related quantities.
#
##### LOAD LIBRARIES #######
#
source("helper_functions.R")
source("integral_functions.R")
source("datagen_functions.R")
source('C:/Users/asadh/Dropbox/00A POSTDOC Other Projects/Grace Yi/Measurement Error TMLE/Rfiles/datagen_functions.R')
#
# Y|X,L = 1 + X - 1.5*L + Normal(0, sigma)
# Pr(X=1| L) = expit(alpha*L)
# L = Normal(0,1)
# L^* = L + Normal(0, sigma_e);
#
# EY(1) = 1 + 1 - E(1.5*L) = 2
# EY(0) = 1 + 0 - E(1.5*L) = 1
# ATE = EY(1) - EY(0) = 1.
#
gen.data <- function(n=100, alpha = 0.5, sigma = 0.2,
sigma_e = 1) {
L <- rnorm(n)
L_err <- L + rnorm(n, sd = sigma_e)
pr_x <- expit(alpha * L)
X <- rbinom(n, size = 1, prob = pr_x)
Y <- 1 + X - 1.5*L + rnorm(n, sd = sigma)
return(data.frame("Y"  = Y, "X" = X, "L" = L,
"L_err" = L_err, "PrX" = pr_x))
}
# The main functions for calculating the
# Average Treatment effect and related quantities.
#
##### LOAD LIBRARIES #######
#
source("helper_functions.R")
source("integral_functions.R")
source("datagen_functions.R")
dat <- gen.data()
dat
dat$Y
dat$X
attach(dat)
Y
detach(dat)
sapply(dat$L_err, FUN = function(z_t){
calE_transform(z_t = z_t, lim_t = lambda,
lim_z = lambda, char_noise = NULL,
sd_e = 1, myf1)
})
lambda <- 1
sapply(dat$L_err, FUN = function(z_t){
calE_transform(z_t = z_t, lim_t = lambda,
lim_z = lambda, char_noise = NULL,
sd_e = 1, myf1)
})
# Define the functions which we need to transform
# 1. 1/tau
myf1 <- function(z) {
1/TAU(z)
}
# 2. mu
myf2 <- function(z) {
MU(z,1)
}
# 3. mu/tau -> Note: For future we can use
#             convolution property of fourier transform.
myf3 <- function(z) {
MU(z,1)/TAU(z)
}
sapply(dat$L_err, FUN = function(z_t){
calE_transform(z_t = z_t, lim_t = lambda,
lim_z = lambda, char_noise = NULL,
sd_e = 1, myf1)
})
source('C:/Users/asadh/Dropbox/00A POSTDOC Other Projects/Grace Yi/Measurement Error TMLE/Rfiles/datagen_functions.R')
dat <- gen.data()
#
# Y|X,L = 1 + X - 1.5*L + Normal(0, sigma)
# Pr(X=1| L) = expit(alpha*L)
# L = Normal(0,1)
# L^* = L + Normal(0, sigma_e);
#
# EY(1) = 1 + 1 - E(1.5*L) = 2
# EY(0) = 1 + 0 - E(1.5*L) = 1
# ATE = EY(1) - EY(0) = 1.
#
gen.data <- function(n=100, alpha = 0.5, sigma = 0.2,
sigma_e = 1) {
L <- rnorm(n)
L_err <- L + rnorm(n, sd = sigma_e)
# First define the TAU function.
TAU <- function(L) {
expit(alpha * L)
}
pr_x <- TAU(L)
X <- rbinom(n, size = 1, prob = pr_x)
# Then define the MU function
MU <- function(L, X) {
1 + X - 1.5*L
}
Y <- MU(L,X) + rnorm(n, sd = sigma)
return(list("Y"  = Y, "X" = X, "L" = L,
"L_err" = L_err, "PrX" = pr_x,
"MU" = MU, "TAU" = TAU))
}
dat <- gen.data()
dat$MU
dat$TAU
dat$TAU(0)
dat$TAU(1)
dat$TAU(0.4)
alpha
MU <- dat$MU
TAU <- dat$TAU
TAU
MU
z_t
z_t <- 1
calE_transform(z_t = z_t, lim_t = lambda,
lim_z = lambda, char_noise = NULL,
sd_e = 1, myf1)
sapply(dat$L_err, FUN = function(z_t){
calE_transform(z_t = z_t, lim_t = lambda,
lim_z = lambda, char_noise = NULL,
sd_e = 1, myf1)
})
a <- sapply(dat$L_err, FUN = function(z_t){
calE_transform(z_t = z_t, lim_t = lambda,
lim_z = lambda, char_noise = NULL,
sd_e = 1, myf1)
})
plot(a)
plot(dat$L_err)
plot(dat$L_err, a)
term1 <- sapply(dat$L_err, FUN = function(z_t){
calE_transform(z_t = z_t, lim_t = lambda,
lim_z = lambda, char_noise = NULL,
sd_e = 1, myf1)
})
term2 <- sapply(dat$L_err, FUN = function(z_t){
calE_transform(z_t = z_t, lim_t = lambda,
lim_z = lambda, char_noise = NULL,
sd_e = 1, myf2)
})
term3 <- sapply(dat$L_err, FUN = function(z_t){
calE_transform(z_t = z_t, lim_t = lambda,
lim_z = lambda, char_noise = NULL,
sd_e = 1, myf3)
})
dat$Y
dat$X
term1 * dat$Y * dat$X
mean(term1 * dat$Y * dat$X) + mean(term2) - mean(term3 * dat$X)
1-dat$X
dat$X
est_psi0 <- function(Y, X, L_err,
MU, TAU, lambda = 1) {
# Define the functions which we need to transform
# 1. 1/tau
myf1 <- function(z) {
1/(1 - TAU(z))
}
# 2. mu
myf2 <- function(z) {
MU(z,0)
}
# 3. mu/tau -> Note: For future we can use
#             convolution property of fourier transform.
myf3 <- function(z) {
MU(z,0)/(1 - TAU(z))
}
term1 <- sapply(dat$L_err, FUN = function(z_t){
calE_transform(z_t = z_t, lim_t = lambda,
lim_z = lambda, char_noise = NULL,
sd_e = 1, myf1)
})
term2 <- sapply(dat$L_err, FUN = function(z_t){
calE_transform(z_t = z_t, lim_t = lambda,
lim_z = lambda, char_noise = NULL,
sd_e = 1, myf2)
})
term3 <- sapply(dat$L_err, FUN = function(z_t){
calE_transform(z_t = z_t, lim_t = lambda,
lim_z = lambda, char_noise = NULL,
sd_e = 1, myf3)
})
mean(term1 * dat$Y * (1-dat$X)) +
mean(term2) -
mean(term3 * (1-dat$X))
}
# Define the functions which we need to transform
# 1. 1/tau
myf1 <- function(z) {
1/(1 - TAU(z))
}
# 2. mu
myf2 <- function(z) {
MU(z,0)
}
# 3. mu/tau -> Note: For future we can use
#             convolution property of fourier transform.
myf3 <- function(z) {
MU(z,0)/(1 - TAU(z))
}
term1 <- sapply(dat$L_err, FUN = function(z_t){
calE_transform(z_t = z_t, lim_t = lambda,
lim_z = lambda, char_noise = NULL,
sd_e = 1, myf1)
})
term2 <- sapply(dat$L_err, FUN = function(z_t){
calE_transform(z_t = z_t, lim_t = lambda,
lim_z = lambda, char_noise = NULL,
sd_e = 1, myf2)
})
term3 <- sapply(dat$L_err, FUN = function(z_t){
calE_transform(z_t = z_t, lim_t = lambda,
lim_z = lambda, char_noise = NULL,
sd_e = 1, myf3)
})
mean(term1 * dat$Y * (1-dat$X)) +
mean(term2) -
mean(term3 * (1-dat$X))
